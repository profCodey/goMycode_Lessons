

// Put a list of all positions in an array
//When the there is a request for the position
//Return the a response of all INEC position
//Check the position field of the candidate
//Check if position is either President, Vice President or Secretary
//IF its any of the above, BREAK
//IT it is any of the above, Store the age in a variable
//If the position is president, store the age in a variable called presidentAge
//If the position is vice president, store the age in a variable called vicePresidentAge
//If the position is secretary, store the age in a variable called secretaryAge
//IF its a number, CONTINUE
//ELSE RETURN AN ERROR - Kindly input a number
//Make a request to NIN API to confirm the age of the candidate
//IF response is true, CONTINUE
//SUM the ages of the candidates together
//SUM = presidentAge + vicePresidentAge + secretaryAge
//IF SUM of their ages is greater than 160 
// Return "NOT QUALIFIED"
//IF SUM OF AGES IS LESS THAN OR EQUAL TO 160
//Return "QUALIFIED"


let vicePresidentAge = 57;
let presidentAge = 77;
let secretaryAge = 26;

let sum = vicePresidentAge + presidentAge + secretaryAge;

if (sum > 160) {
   // DISQUALIFY THE CANDIDATE
}
IF(sum <= 160) {
    //QUALIFY THE CANDIDATE
}


//Integer/Number
let myAge = 10;
console.log(typeof myAge);
//String
let myName = "Lanre";
console.log(typeof myName);
//Boolean
let nifemi = "female";
console.log(nifemi == "female")
//Array

//Object
//Null
//Undefined
//Float
let mySchoolFees = 10325.76





// console.log(noOfCandidates)



// const lanresFavouriteFood = "Rice"
// lanresFavouriteFood = "Beans";



// let lanresFavouriteFood;
// lanresFavouriteFood = "Rice"



//let presdenteAge = 77
//var presidentAge = 77
//const presidentAge = 77

//var presidentAge = 88


// take in the first input
//check if first input is [ '*', '/']
//Throw an error - Kindly input a number

//CREATE AN APPLICATION THAT STORES TWO NUMBERS
//TAKE IN THE FIRST NUMBER
//STORE IN A VARIABLE CALLED FIRST NUMBER
//TAKE IN THE SECOND NUMBER
//STORE IN A VARIABLE CALLED SECOND NUMBER
//ADD FIRST NO. WITH SECOND NUMBER TOGETHER
//STORE THE RESULT IN A VARIABLE CALLED SUM
//RETURN SUM

function add(a, b) {
    let firstNumber = a;
    let secondNumber = b;
    let summation;
    summation = firstNumber + secondNumber;
  return summation;
}

console.log(add(344, 599));   

//take in the score as input
//check if score is greater 100
//if so, throw an error "OGA, YOU WAN CARRY OUT MARK AWAY"
//if it is not a number, throw an error "Kindly input a number"
//store the score into a variable called "studentMark"
//check if the score is between 71 - 100
//if it is, return "EXCELLENT"
//check if the score is between 51 - 70
//if it is, return "GOOD"
//check if the score is between 41 - 50
//if it is, return "FAIR"
//check if the score is between 0 - 40
//if it is, return "FAILED"

function grade(score) {
    let studentMark = score;
    if (typeof studentMark !== "number") {
    return "Kindly input a number";
    }
    if (studentMark > 100) {
    return  "Invalid score, a student cannot score more than 100%"
    }
    if (studentMark >= 71 && studentMark <= 100) {
        return "EXCELLENT";
    }
    if (studentMark >= 51 && studentMark <= 70) {
        return "GOOD";
    }
    if (studentMark >= 41 && studentMark <= 50) {
        return "FAIR";
    }
    
    else return "FAILED";
}

console.log(grade("1O"));


switch
CASE 1: Input is not a number
    RETURN "Kindly input a number"
break;
CASE 2: Input is greater than 100
    RETURN "Invalid score, a student cannot score more than 100%"
break;
CASE 3: Input is between 71 - 100
    RETURN "EXCELLENT"
CASE 4: Input is between 51 - 70
    RETURN "GOOD"
break;
CASE 5: Input is between 41 - 50
    RETURN "FAIR"
break;
CASE 6: Input is between 0 - 40
    RETURN "FAILED"
break;
DEFAULT: RETURN "Invalid score"


//IF CHILD IS ONE YEAR OLD
//ADD 150 K TO HIS ACCOUNT

//IF CHILD 2 YEARS OLD
//ADD 150 K TO HIS ACCOUNT

//IF CHILD 3 YEARS OLD
//ADD 150 K TO HIS ACCOUNT

//IF CHILD 4 YEARS OLD
//ADD 150 K TO HIS ACCOUNT

//IF CHILD 5 YEARS OLD
//ADD 150 K TO HIS ACCOUNT

//IF CHILD 6 YEARS OLD
//ADD 150 K TO HIS ACCOUNT

//IF CHILD 7 YEARS OLD
//ADD 150 K TO HIS ACCOUNT

//IF CHILD 8 YEARS OLD
//ADD 150 K TO HIS ACCOUNT

//IF CHILD 9 YEARS OLD
//ADD 150 K TO HIS ACCOUNT

//IF CHILD 10 YEARS OLD
//ADD 150 K TO HIS ACCOUNT

//IF CHILD 11 YEARS OLD
//ADD 150 K TO HIS ACCOUNT

//IF CHILD 12 YEARS OLD
//ADD 150 K TO HIS ACCOUNT

//IF CHILD 13 YEARS OLD
//ADD 150 K TO HIS ACCOUNT

//IF CHILD 14 YEARS OLD
//ADD 150 K TO HIS ACCOUNT

//IF CHILD 15 YEARS OLD
//ADD 150 K TO HIS ACCOUNT

//IF CHILD 16 YEARS OLD
//ADD 150 K TO HIS ACCOUNT

//IF CHILD 17 YEARS OLD
//ADD 150 K TO HIS ACCOUNT
//STOP!



//WHILE CHILD IS LESS THAN 18 YEARS OLD
//ADD 150 K TO HIS ACCOUNT
//EVERY TWO YEARS 


//CONDITION
//LOGIC & ACTIONS
//ITERATOR -3
//LOOPS - 6 TIMES


//how many letters are repeated in consecutively in a word

//accommodation
let counter = 2;

//create a variable called counter
//set counter - 0
//while the words exists
//iteration - 1
//check if the first letter is equal to the second letter
//if it is, add 1 to the counter
//return counter


//condition
//logic & actions /instructions
//loop
//iterator















// At this checkpoint you are asked to write an algorithm that fulfills the following description:

// Description:

//     Problem 1
     
//     Given two sets of elements, find the sum of all distinct elements from the set. In other words, find the sum of all elements which are present in either of the given set.
//     Example:
//     Set 1 : [3, 1, 7, 9], Set 2: [2, 4, 1, 9, 3]
//     Output: 13 (distinct elements 4, 7, 2 )
//     Give a solutions to this problem, using arrays

     




// We consider three integer variables x, y and z.
// We define the circular permutation between x, y and z as the operation which gives x the  value of y, at y the value of z and at z the value of x.
// Write an algorithm allowing circular permutation between x, y and z. The algorithm should read  the 3 values then display them after permutations.
// Example: if x = 3 y = -1 and z = 7, we will have after permutations: x = -1, y = 7 and z = 3.

//GET vairable X =  17
//Get variable Y  =  23
//Get variable Z =  33
//LET X = Y
//LET Y = Z
//LET Z = X;
//CONSOLE.LOG(X)
//CONSOLE.LOG(Y)
//console.log(10)

let name = "sola";















// [ "PDP", "APC", , "ADC", "SDP", "ANPP"," APGA", "PPA", "DPP", "NCP", "CPP", "PPN", "LP"]

//as long as position <= 11
//check for the name of the party
// store the party name in a variable called party
//check the array for all the candidate that has the party name of party
//


let party = "PDP"
let age1 = 78
let age2 = 99
let age3 = 67


[
 let candidate1 ={
age : 78,
party : "PDP",
position: "President"
}

let candidate2 = {
    age: 67,
    party : "LP",
    position: "VP"
}

let canditate3 = {
    age:  "99",
    party: "PDP",
    position: "Secretary"
}

let canditate4 = {
    age:  "99",
    party: "PDP",
    position: "VP"
}
]

 let party ="APC"







//ITERATOR
//CONDITION
//INSTRUCTION


12 months  = 1
1 months = 0.08
..16


interval = 2;
while (child < 18){
withdraw 50K from parents ACCOUNT
add 50K to child's acount
}


